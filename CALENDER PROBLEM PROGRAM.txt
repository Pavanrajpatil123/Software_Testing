import java.util.Scanner;

public class SimpleCalendar {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input
        System.out.print("Enter month (1-12): ");
        int month = sc.nextInt();
        System.out.print("Enter year: ");
        int year = sc.nextInt();

        // Month names
        String[] monthNames = { "", "January", "February", "March", "April", "May", "June",
                                "July", "August", "September", "October", "November", "December" };

        // Days in each month
        int[] days = { 0, 31, 28, 31, 30, 31, 30,
                          31, 31, 30, 31, 30, 31 };

        // Leap year adjustment
        if (month == 2 && isLeapYear(year)) {
            days[2] = 29;
        }

        // Print header
        System.out.println("\n" + monthNames[month] + " " + year);
        System.out.println("Sun Mon Tue Wed Thu Fri Sat");

        // Get starting day (0=Sun, 1=Mon, ..., 6=Sat)
        int startDay = getStartDay(month, year);

        // Print initial spaces
        for (int i = 0; i < startDay; i++) {
            System.out.print("    ");
        }

        // Print days
        for (int d = 1; d <= days[month]; d++) {
            System.out.printf("%3d ", d);
            if ((startDay + d) % 7 == 0) {
                System.out.println();
            }
        }

        sc.close();
    }

    // Check leap year
    static boolean isLeapYear(int y) {
        return (y % 4 == 0 && y % 100 != 0) || (y % 400 == 0);
    }

    // Zeller's Congruence to find day of week for 1st day
    static int getStartDay(int m, int y) {
        if (m < 3) {
            m += 12;
            y--;
        }
        int q = 1, k = y % 100, j = y / 100;
        int h = (q + (13 * (m + 1)) / 5 + k + (k / 4) + (j / 4) + 5 * j) % 7;
        return (h + 6) % 7;  // Convert to 0=Sun, 1=Mon, ..., 6=Sat
    }
}








Output:
Enter month (1-12): 1
Enter year: 2025

January 2025
Sun Mon Tue Wed Thu Fri Sat
              1   2   3   4 
  5   6   7   8   9  10  11 
 12  13  14  15  16  17  18 
 19  20  21  22  23  24  25 
 26  27  28  29  30  31 
